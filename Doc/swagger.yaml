openapi: 3.0.0
info:
  title: SmartWaste API
  version: 1.0.0
  description: API documentation for the SmartWaste application
  contact:
    name: Dushimimana Fabrice
    email: fabdushime20@gmail.com
servers:
  - url: 'http://localhost:5000'
    description: Local server
  - url: 'https://smartwaste-back-end.onrender.com'
    description: Deployed server on Render
paths:
  /smartWaste/user/signup:
    post:
      summary: User registration
      description: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FullName:
                  type: string
                  example: "fab"
                email:
                  type: string
                  example: "fab@gmail.com"
                password:
                  type: string
                  example: "1234567"
                address:
                  type: string
                  example: "kigali, nyarugenge"
                phone_number:
                  type: string
                  example: "0789635342"
      responses:
        '201':
          description: User account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account created!"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/user/signin:
    post:
      summary: User login
      description: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "fab@gmail.com"
                password:
                  type: string
                  example: "1234567"
      responses:
        '200':
          description: User account verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account verified!"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "jwt_token_here"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/user/listAll:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/user/updateUserProfile/{id}:
    patch:
      summary: Update user by ID
      description: Update a user profile by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to be updated
          schema:
            type: string
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/user/findUserProfile/{id}:
    get:
      summary: Find user by ID
      description: Retrieve a user profile by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to be found
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/user/deleteUser/{id}:
    delete:
      summary: Delete user by ID
      description: Delete a user profile by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to be deleted
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /smartWaste/route/addRoute:
    post:
      summary: Add a new waste collection route
      description: Create a new waste collection route with specified details.
      tags:
        - Routes
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: Route created successfully
        '400':
          description: Bad Request (Invalid input)
        '500':
          description: Server error (Unable to create route)

  /smartWaste/route/allRoute:
    get:
      summary: Get all waste collection routes
      description: Fetch all available waste collection routes.
      tags:
        - Routes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all waste collection routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '401':
          description: Unauthorized (Token is missing or invalid)
        '500':
          description: Server error (Unable to fetch routes)

  /smartWaste/route/getRouteById/{id}:
    get:
      summary: Get waste collection routes
      description: Fetch waste collection routes by id.
      tags:
        - Routes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of Route
          schema:
            type: string
      responses:
        '200':
          description: Waste collection route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '401':
          description: Unauthorized (Token is missing or invalid)
        '500':
          description: Server error (Unable to fetch routes)
        '404':
          description: Not Found (Unable to fetch routes)

  /smartWaste/route/getRouteByName/{route_name}:
    get:
      summary: Get waste collection routes
      description: Fetch waste collection routes by route name.
      tags:
        - Routes
      security:
        - BearerAuth: []
      parameters:
        - name: route_name
          in: path
          required: true
          description: Name of the route to be fetched
          schema:
            type: string
      responses:
        '200':
          description: Waste collection route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '401':
          description: Unauthorized (Token is missing or invalid)
        '500':
          description: Server error (Unable to fetch routes)
        '404':
          description: Not Found (Unable to fetch routes)

  /smartWaste/route/updateRoute/{id}:
    patch:
      summary: Update Route
      description: Update waste collection route by id
      tags:
        - Routes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the route to be updated
          schema:
            type: string
      requestBody:
        description: Route object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '401':
          description: Unauthorized (Token is missing or invalid)
        '404':
          description: Not Found (Route does not exist)
        '500':
          description: Server error (Unable to update route)

  /smartWaste/route/deleteRoute/{id}:
    delete:
      summary: Delete Route
      description: Delete a waste collection route by id
      tags:
        - Routes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the route to be deleted
          schema:
            type: string
      responses:
        '200':
          description: Route deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '401':
          description: Unauthorized (Token is missing or invalid)
        '404':
          description: Not Found (Route does not exist)
        '500':
          description: Server error (Unable to delete route)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        FullName:
          type: string
          example: "fab"
        email:
          type: string
          example: "fab@gmail.com"
        address:
          type: string
          example: "kigali, nyarugenge"
        phone_number:
          type: string
          example: "0789635342"
    Route:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        route_name:
          type: string
          example: "Kiyovu"
        area_covered:
          type: string
          example: "Nyarugenge sector"
        collection_days:
          type: array
          example: ["Monday", "Thursday"]
        waste_collector_id:
          type: string
          example: "54321"
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message"
